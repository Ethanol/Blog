---
layout: post
title: 千寻的架构设计（二）
categories:
- 软件工程
---
上一篇文章概括地描述了千寻使用的通讯方式和数据库，本篇文章我们将重点探讨一下千寻的数据库该如何设计。

在设计数据库前，我将千寻涉及到的主要功能列在下面。当然实际上，在明确功能点和需求上，更好的手段是编写用户故事。不过，这里还是用这样简单的方式来说明问题：

* 注册、登录，个人资料包括性别、出生日期、签名、照片、星座、学校等
* 通过通讯录、邮箱等方式添加好友
* 点对点聊天
* 发现周围人
* 利用兴趣爱好来辅助查找周围人
* 好友分组
* 设置在线状态：在线、仅好友可见、隐身
* 创建基于话题和基于好友的两种讨论组
* 发起活动，活动包括标题、地点（可选）、简介等信息
* 参与活动
* 白板讨论

结合上篇文章所述关于数据持久化的内容，我们对这些功能涉及到的数据做如下区分：

1. 保存在MongoDB中、缓存在Redis中的数据
2. 保存在Redis、备份在MongoDB中的数据

第一类数据包括：

*   用户信息（UserProfile）

    用户信息包括用户名、密码（MD5+salt）、性别、出生日期、星座、签名、学校、职业、手机号和地理位置等基本信息。此外用户信息文档（Document）里，还保存有好友集合、标签（如兴趣）集合。这些信息可以以列表的形式保存在MongoDB中。

*   活动信息（Activy）

    活动信息包括活动的标题、活动时间、活动地点（文字描述+坐标）、简介、发起人和参与者列表。

为了进一步提高效率，我们还需要使用Redis作为缓存来保存这些数据及相关结果：

* 当用户上线时，用户的信息应当被加载到Redis中，存储方式为：

    * 在线列表
        无序集合。key: "onlines", val: ('user\_id1', 'user\_id2', ...)
    * 用户资料
        哈希。key: "user:user\_id", val: {'username': XXX, 'gender': XXX, ...)

未完待续
